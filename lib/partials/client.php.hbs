class Client
{
    private $httpClient;

    private $options;

    public $resources;

    public function __construct($options = [])
    {
        $baseUriParameters = [];
        if (isset($options['baseUriParameters'])) {
            $baseUriParameters = $options['baseUriParameters'];
            unset($options['baseUriParameters']);
        }
        $baseUri;
        if (isset($options['baseUri'])) {
            $baseUri = template($options['baseUri'], $baseUriParameters);
            unset($options['baseUri']);
        } else {
            $baseUri = template({{{stringify baseUri}}}, [{{#each baseUriParameters}}'{{@key}}' => '{{{stringify default}}}'{{#unless @last}}, {{/unless}}{{/each}}]);

        }
        $options['base_uri'] = ltrim($baseUri, "/") . "/";
        $this->options = $options;
        $this->httpClient = new HttpClient($this->options);
        $this->resources = new RootResource('.', $this);
    }

    protected function buildRequest($path, $method, $body = null, $options = [])
    {
        $options = array_merge($this->options, $options);
        $hasBody = $method !== 'GET' && $method !== 'HEAD';

        $reqQuery = [];
        if (isset($options['query'])) {
            $reqQuery = $options['query'];
            unset($options['query']);
        }
        $headers = isset($options['headers']) ? $options['headers'] : [];

        $request = new Request($method, $path, $headers);

        if ($hasBody && !is_null($body)) {
            $request = $request->withBody($body);
        }
        if (!$hasBody && !is_null($body)) {
            $reqQuery = array_merge($reqQuery, $body);
        }
        if (count($reqQuery) > 0) {
            $params = [];
            foreach ($reqQuery as $key => $value) {
                if (!is_array($value)) {
                    $param = new Parameter($key, $value);
                    $params[$param->getId()] = $param;
                } else {
                    foreach ($value as $data) {
                        $param = new MultiParameter($key, $data);
                        $params[$param->getId()] = $param;
                    }
                }
            }
            $params = array_map(
                function ($param) {
                    return (string)$param;
                },
                $params
            );
            sort($params);
            $query = implode('&', $params);
            $uri = $request->getUri()->withQuery($query);
            $request = $request->withUri($uri);
        }

        return $request;
    }

    public function request($path, $method, $body = null, $options = [])
    {
        return $this->send($this->buildRequest($path, $method, $body, $options));
    }

    public function resource($route, $parameters)
    {
        $path = '/' . ltrim(template($route, $parameters),'/');

        return new CustomResource($path, $this);
    }

    protected function send(Request $request)
    {
        return $this->getHttpClient()->send($request);
    }

    public function getHttpClient()
    {
        return $this->httpClient;
    }
}
