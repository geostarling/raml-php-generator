class Parameter
{
    protected $key;
    protected $value;

    public function __construct($key, $value = null)
    {
        if (empty($key)) {
            throw new \InvalidArgumentException('no key given');
        }
        $this->key = $key;
        $this->value = $value;
    }

    public function getId()
    {
        return $this->key;
    }

    public function getValue()
    {
        return $this->value;
    }

    public function __toString()
    {
        $value = $this->getValue();
        if (is_null($value)) {
            $paramStr = $this->key;
        } elseif (is_bool($value)) {
            $paramStr = $this->key . '=' . ($value ? 'true' : 'false');
        } else {
            $paramStr = $this->key . '=' . urlencode((string)$value);
        }

        return $paramStr;
    }
}

class MultiParameter extends Parameter
{
    public function getId()
    {
        return $this->__toString();
    }
}

class Resource
{
    protected $client;
    protected $uri;

    public function __construct($uri, Client $client)
    {
        $this->uri = $uri;
        $this->client = $client;
    }
}

{{#each allResources}}
class {{pascalCase id}} extends Resource
{
    {{#each children}}
    {{#unless uriParameters}}
    public ${{camelCase @key}};
    {{/unless}}
    {{/each}}

    public function __construct($uri, $client)
    {
        parent::__construct($uri, $client);

        {{#each children}}

        {{#unless uriParameters}}
        $this->{{camelCase @key}} = new {{pascalCase id}}($this->uri . {{{stringify relativeUri}}}, $client);
        {{/unless}}
        {{/each}}
    }

    {{#each children}}
    {{#if uriParameters}}
    public function {{camelCase @key}}({{#each uriParameters}}${{displayName}}{{#if default}} = {{{stringify default}}}{{/if}}{{#unless @last}}, {{/unless}}{{/each}})
    {
        {{#each uriParameters}}
        {{#if default}}
        if (is_null(${{displayName}})) {
            ${{displayName}} = {{{stringify default}}};
        }
        {{/if}}
        {{/each}}
        $uri = $this->uri . template({{{stringify relativeUri}}}, [{{#each uriParameters}}${{displayName}}{{#unless @last}}, {{/unless}}{{/each}}]);

        return new {{pascalCase id}}($uri, $this->client);
    }
    {{/if}}
    {{/each}}

    {{#each methods}}
    public function {{camelCase @key}}($body = null, $options = [])
    {
        {{#if (keys headers)}}
        {{#each headers}}
        if (!isset($options['headers'][{{{stringify (upperCase @key)}}}])
            && !isset($options['headers'][{{{stringify (lowerCase @key)}}}])
        ) {
            $options['headers'][{{{stringify (lowerCase @key)}}}] = {{{stringify default}}};
        }
        {{/each}}
        {{/if}}
        return $this->client->request($this->uri, {{{stringify (upperCase method)}}}, $body, $options);
    }
    {{/each}}
}
{{/each}}

class CustomResource extends Resource
{
    {{#each supportedMethods}}
    public function {{camelCase this}}($body = null, $options = [])
    {
        return $this->client->request($this->uri, {{{stringify (upperCase this)}}}, $body, $options);
    }
{{/each}}
}
